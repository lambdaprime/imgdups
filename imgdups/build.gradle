plugins {
  id 'com.diffplug.spotless'
  id 'java'
}

apply plugin : 'eclipse'

dependencies {
  implementation 'io.github.lambdaprime:id.xfunction:23.0-SNAPSHOT'
  implementation 'io.github.lambdaprime:matcv:4.0-SNAPSHOT'
  implementation files('/usr/share/java/opencv.jar')
}

configurations {
  customConfig.extendsFrom implementation
}

jar {
  manifest { 
    attributes 'Implementation-Version': "${rootProject.version}",
      'Main-Class': 'id.imgdups.app.ImgdupsApp'
  }
}

def packageDir = "$buildDir/package/${projectName}"

ext.artifacts = fileTree(include: ['*'], dir: "$packageDir/libs")

task createRelease(type: Zip) {
    archiveFileName = "$releaseFileName"
    destinationDirectory = file("$projectDir/release")
    from file("$packageDir/..")
}

task copyLibs(type: Copy) {
    from configurations.customConfig
    from jar.archiveFile
    into "${packageDir}/libs"
}

task copyReadme(type: Copy) {
  from("${project.rootDir}/README.md")
  into("$buildDir/resources/main")
}

task createPackage(type: Copy, dependsOn: copyLibs) {
    from "${project.rootDir}/README.md"
    from "${project.rootDir}/LICENSE-2.0.txt"
    from "$projectDir/src/main/imgdups"
    into packageDir
}

task cleanRelease(type: Delete) {
  delete "$packageDir"
  delete "$projectDir/release/*-SNAPSHOT.zip"
}

jar.dependsOn copyReadme
createRelease.dependsOn createPackage
assemble.dependsOn createRelease
clean.dependsOn cleanRelease
// run spotless and format code before the build
classes.dependsOn spotlessApply
